<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Portal - Smart Attendance</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/style/studentportal.css">
</head>
<body>
    <header class="header">
        <div class="header-content">
            <div class="logo-section">
                <div class="logo-icon">
                    <i class="fas fa-brain"></i>
                </div>
                <div class="header-title">
                    <h1>Smart Attendance</h1>
                    <p>"Your gateway to seamless attendance tracking"</p>
                </div>
            </div>
            
            <div class="user-info">
                <h3>Welcome, Krishna Bhardwaj</h3>
                <div class="user-details">
                    <span><i class="fas fa-id-card"></i> 2315001170</span>
                    <span><i class="fas fa-graduation-cap"></i> B.Tech</span>
                    <span><i class="fas fa-calendar-alt"></i> Year III</span>
                    <span><i class="fas fa-check-circle"></i> Registered</span>
                </div>
            </div>
            <div class="user-actions">
                <a href="/student/registerFace" class="action-btn">
                    <i class="fas fa-camera"></i> Register Face
                </a>
                <a href="/" class="action-btn logout-btn" data-logout>
                    <i class="fas fa-sign-out-alt"></i> Logout
                </a>
            </div>
        </div>
    </header>

    <!-- Main Container -->
    <div class="main-container">
        <!-- Left Sidebar - Today's Classes -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h2>Today's Schedule</h2>
                <div class="current-date" id="currentDate"></div>
            </div>
            
            <div class="class-list">
                <div class="class-item" onclick="selectClass(this, 'Machine Learning', '10:00 - 11:00 AM')">
                    <div class="class-time">10:00 - 11:00 AM</div>
                    <div class="class-subject">Machine Learning Dr. Sayantan Sinha</div>
                    <div class="class-location">
                        <i class="fas fa-map-marker-alt"></i>
                        Academic Block-I 405
                    </div>
                </div>

                <div class="class-item" onclick="selectClass(this, 'Data Structures', '11:00 - 12:00 PM')">
                    <div class="class-time">11:00 - 12:00 PM</div>
                    <div class="class-subject">Data Structures</div>
                    <div class="class-location">
                        <i class="fas fa-map-marker-alt"></i>
                        Academic Block-II 301
                    </div>
                </div>

                <div class="class-item" onclick="selectClass(this, 'Database Management', '12:00 - 01:00 PM')">
                    <div class="class-time">12:00 - 01:00 PM</div>
                    <div class="class-subject">Database Management</div>
                    <div class="class-location">
                        <i class="fas fa-map-marker-alt"></i>
                        Computer Lab-A
                    </div>
                </div>

                <div class="class-item" onclick="selectClass(this, 'Computer Networks', '02:00 - 03:00 PM')">
                    <div class="class-time">02:00 - 03:00 PM</div>
                    <div class="class-subject">Computer Networks</div>
                    <div class="class-location">
                        <i class="fas fa-map-marker-alt"></i>
                        Academic Block-I 205
                    </div>
                </div>

                <div class="class-item" onclick="selectClass(this, 'Software Engineering', '03:00 - 04:00 PM')">
                    <div class="class-time">03:00 - 04:00 PM</div>
                    <div class="class-subject">Software Engineering</div>
                    <div class="class-location">
                        <i class="fas fa-map-marker-alt"></i>
                        Academic Block-III 102
                    </div>
                </div>

                <div class="class-item" onclick="selectClass(this, 'Machine Learning', '04:00 - 05:00 PM')">
                    <div class="class-time">04:00 - 05:00 PM</div>
                    <div class="class-subject">Machine Learning</div>
                    <div class="class-location">
                        <i class="fas fa-map-marker-alt"></i>
                        AI Lab Block-B
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Content Area -->
        <div class="content-area">
            <!-- Welcome Section (Default) -->
            <div class="welcome-section" id="welcomeSection">
                <h2>ðŸŽ“ Welcome to Your Portal!</h2>
                <p>Select a class from your schedule to mark your attendance. Make sure to have good lighting and look directly at the camera when marking your presence. Your attendance is important for your academic progress!</p>
            </div>

            <!-- Attendance Section (Hidden by default) -->
            <div class="attendance-section" id="attendanceSection">
                <div class="content-header">
                    <h2 id="selectedClass">Machine Learning</h2>
                    <p id="selectedTime">10:00 - 11:00 AM</p>
                </div>

                <!-- Attendance Status -->
                <div class="attendance-status">
                    <div class="status-info">
                        <div class="status-icon pending" id="statusIcon">
                            <i class="fas fa-clock"></i>
                        </div>
                        <div class="status-text">
                            <h3 id="statusTitle">Attendance Pending</h3>
                            <p id="statusDescription">Click "Mark Present" to start the face recognition process</p>
                        </div>
                    </div>
                    <button class="mark-present-btn" id="markPresentBtn" onclick="markPresent()">
                        <i class="fas fa-user-check"></i>
                        Mark Present
                    </button>
                </div>

                <!-- Camera Section -->
                <div class="camera-section">
                    <div class="camera-header">
                        <div class="camera-title">Face Recognition Camera</div>
                        <div class="current-time" id="currentTime"></div>
                    </div>
                    
                    <div class="camera-container">
                        <div class="camera-placeholder" id="cameraPlaceholder">
                            <i class="fas fa-camera" style="font-size: 3rem; margin-bottom: 15px;"></i>
                            <br>Camera is off. Click "Start Camera" to begin.
                        </div>
                        <!-- Changed from img to video element -->
                        <video class="camera-feed" id="cameraFeed" autoplay muted style="display: none;"></video>
                    </div>
                    
                    <div class="camera-controls">
                        <button class="camera-btn start-camera-btn" onclick="startCamera()">
                            <i class="fas fa-video"></i>
                            Start Camera
                        </button>
                        <button class="camera-btn stop-camera-btn" onclick="stopCamera()">
                            <i class="fas fa-video-slash"></i>
                            Stop Camera
                        </button>
                    </div>
                </div>

                <!-- Attendance Log -->
                <div class="attendance-log">
                    <div class="log-header">Recent Attendance Updates</div>
                    <div id="attendanceLog">
                        <div class="log-item">
                            <span>No recent updates</span>
                            <span>--:--</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Student Dashboard JavaScript

let cameraStream = null;
let currentSubject = null;
let currentTime = null;
let faceRecognitionActive = false;

document.addEventListener('DOMContentLoaded', function() {
    updateDateTime();
    setInterval(updateDateTime, 1000);
    
    // Load today's schedule
    loadTodaySchedule();
});

function updateDateTime() {
    const now = new Date();
    
    // Update date
    const dateOptions = { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
    };
    const dateElement = document.getElementById('currentDate');
    if (dateElement) {
        dateElement.textContent = now.toLocaleDateString('en-US', dateOptions);
    }
    
    // Update time
    const timeOptions = { 
        hour: '2-digit', 
        minute: '2-digit', 
        second: '2-digit', 
        hour12: true 
    };
    const timeElement = document.getElementById('currentTime');
    if (timeElement) {
        timeElement.textContent = now.toLocaleTimeString('en-US', timeOptions);
    }
}

function selectClass(element, subject, time) {
    // Remove active class from all items
    document.querySelectorAll('.class-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // Add active class to selected item
    element.classList.add('active');
    
    // Hide welcome section and show attendance section
    document.getElementById('welcomeSection').style.display = 'none';
    document.getElementById('attendanceSection').style.display = 'block';
    
    // Update selected class info
    document.getElementById('selectedClass').textContent = subject;
    document.getElementById('selectedTime').textContent = time;
    
    // Store current selection
    currentSubject = subject;
    currentTime = time;
    
    // Reset attendance status
    resetAttendanceStatus();
    
    // Check if attendance already marked
    checkAttendanceStatus(subject);
    
    // Check if teacher has granted access
    checkClassAccess(subject);
}

function resetAttendanceStatus() {
    const statusIcon = document.getElementById('statusIcon');
    const statusTitle = document.getElementById('statusTitle');
    const statusDescription = document.getElementById('statusDescription');
    const markPresentBtn = document.getElementById('markPresentBtn');
    
    if (statusIcon && statusTitle && statusDescription && markPresentBtn) {
        statusIcon.className = 'status-icon pending';
        statusIcon.innerHTML = '<i class="fas fa-clock"></i>';
        statusTitle.textContent = 'Attendance Pending';
        statusDescription.textContent = 'Click "Mark Present" to start the face recognition process';
        markPresentBtn.disabled = false;
        markPresentBtn.innerHTML = '<i class="fas fa-user-check"></i> Mark Present';
        markPresentBtn.style.background = '';
    }
}

function checkAttendanceStatus(subject) {
    fetch(`/student/attendance-status/${subject}`)
        .then(response => response.json())
        .then(data => {
            if (data.success && data.marked) {
                const statusIcon = document.getElementById('statusIcon');
                const statusTitle = document.getElementById('statusTitle');
                const statusDescription = document.getElementById('statusDescription');
                const markPresentBtn = document.getElementById('markPresentBtn');
                
                statusIcon.className = 'status-icon present';
                statusIcon.innerHTML = '<i class="fas fa-check"></i>';
                statusTitle.textContent = 'Already Marked';
                statusDescription.textContent = 'Your attendance has been marked for today';
                markPresentBtn.disabled = true;
                markPresentBtn.innerHTML = '<i class="fas fa-check-circle"></i> Present';
                markPresentBtn.style.background = 'var(--success-color)';
            }
        })
        .catch(error => {
            console.error('Error checking attendance status:', error);
        });
}

function checkClassAccess(subject) {
    fetch(`/student/check-access/${subject}`)
        .then(response => response.json())
        .then(data => {
            if (!data.access_granted) {
                const statusDescription = document.getElementById('statusDescription');
                const markPresentBtn = document.getElementById('markPresentBtn');
                
                if (statusDescription && markPresentBtn) {
                    statusDescription.textContent = 'Teacher has not granted access for attendance marking';
                    markPresentBtn.disabled = true;
                }
            }
        })
        .catch(error => {
            console.error('Error checking class access:', error);
        });
}

function markPresent() {
    if (!currentSubject) {
        showMessage('Please select a class first', 'error');
        return;
    }
    
    // Check if camera is active
    if (!cameraStream) {
        showMessage('Please start the camera first', 'error');
        return;
    }
    
    const markPresentBtn = document.getElementById('markPresentBtn');
    const statusIcon = document.getElementById('statusIcon');
    const statusTitle = document.getElementById('statusTitle');
    const statusDescription = document.getElementById('statusDescription');
    
    // Change button state
    markPresentBtn.disabled = true;
    markPresentBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
    
    // Capture image from camera
    captureAndProcessImage()
        .then(imageData => {
            if (!imageData) {
                throw new Error('Failed to capture image');
            }
            
            // Send for face recognition
            return fetch('/attendance/mark-attendance', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    subject: currentSubject,
                    image: imageData
                })
            });
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Update status to present
                statusIcon.className = 'status-icon present';
                statusIcon.innerHTML = '<i class="fas fa-check"></i>';
                statusTitle.textContent = 'Attendance Marked';
                statusDescription.textContent = `Face recognized with ${data.confidence}% confidence`;
                
                markPresentBtn.innerHTML = '<i class="fas fa-check-circle"></i> Present';
                markPresentBtn.style.background = 'var(--success-color)';
                
                // Add to attendance log
                addToAttendanceLog(`${currentSubject} - Attendance Marked`);
                
                showMessage('Attendance marked successfully!', 'success');
            } else {
                throw new Error(data.message);
            }
        })
        .catch(error => {
            console.error('Error marking attendance:', error);
            showMessage(error.message || 'Failed to mark attendance', 'error');
            
            // Reset button state
            markPresentBtn.disabled = false;
            markPresentBtn.innerHTML = '<i class="fas fa-user-check"></i> Mark Present';
            markPresentBtn.style.background = '';
        });
}

function captureAndProcessImage() {
    return new Promise((resolve, reject) => {
        const video = document.getElementById('cameraFeed');
        if (!video || !cameraStream) {
            reject(new Error('Camera not available'));
            return;
        }
        
        // Create canvas to capture image
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');
        
        // Set canvas size to video size
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        
        // Draw video frame to canvas
        context.drawImage(video, 0, 0);
        
        // Get image data as base64
        const imageData = canvas.toDataURL('image/jpeg', 0.8);
        resolve(imageData);
    });
}

function startCamera() {
    const placeholder = document.getElementById('cameraPlaceholder');
    const video = document.getElementById('cameraFeed');
    
    if (!video) {
        // Create video element if it doesn't exist
        const videoElement = document.createElement('video');
        videoElement.id = 'cameraFeed';
        videoElement.className = 'camera-feed';
        videoElement.autoplay = true;
        videoElement.muted = true;
        videoElement.style.display = 'none';
        
        const cameraContainer = document.querySelector('.camera-container');
        if (cameraContainer) {
            cameraContainer.appendChild(videoElement);
        }
    }
    
        // Replace the existing camera placeholder logic with actual video element
        const videoElement = document.getElementById('cameraFeed');
        if (videoElement.tagName === 'IMG') {
            // Replace img with video element
            const video = document.createElement('video');
            video.id = 'cameraFeed';
            video.className = 'camera-feed';
            video.autoplay = true;
            video.muted = true;
            video.style.display = 'none';
            
            const container = videoElement.parentNode;
            container.replaceChild(video, videoElement);
        }
        
        navigator.mediaDevices.getUserMedia({ 
            video: { 
                width: 640, 
                height: 480,
                facingMode: 'user'
            } 
        })
        .then(stream => {
            cameraStream = stream;
            const video = document.getElementById('cameraFeed');
            
            if (video) {
                video.srcObject = stream;
                video.style.display = 'block';
                
                if (placeholder) {
                    placeholder.style.display = 'none';
                }
                
                showMessage('Camera started successfully', 'success');
            }
        })
        .catch(error => {
            console.error('Error accessing camera:', error);
            showMessage('Failed to access camera. Please check permissions.', 'error');
        });
    }

    function stopCamera() {
        if (cameraStream) {
            cameraStream.getTracks().forEach(track => track.stop());
            cameraStream = null;
        }
        
        const placeholder = document.getElementById('cameraPlaceholder');
        const video = document.getElementById('cameraFeed');
        
        if (video) {
            video.style.display = 'none';
            video.srcObject = null;
        }
        
        if (placeholder) {
            placeholder.style.display = 'block';
        }
        
        showMessage('Camera stopped', 'info');
    }

    function addToAttendanceLog(message) {
        const log = document.getElementById('attendanceLog');
        if (!log) return;
        
        const now = new Date();
        const timeString = now.toLocaleTimeString('en-US', { 
            hour: '2-digit', 
            minute: '2-digit', 
            hour12: true 
        });
        
        const logItem = document.createElement('div');
        logItem.className = 'log-item';
        logItem.innerHTML = `
            <span>${message}</span>
            <span>${timeString}</span>
        `;
        
        // Add to top of log
        log.insertBefore(logItem, log.firstChild);
        
        // Keep only last 5 items
        while (log.children.length > 5) {
            log.removeChild(log.lastChild);
        }
    }

    function loadTodaySchedule() {
        fetch('/student/schedule')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateScheduleDisplay(data.schedule);
                }
            })
            .catch(error => {
                console.error('Error loading schedule:', error);
            });
    }

    function updateScheduleDisplay(schedule) {
        const classList = document.querySelector('.class-list');
        if (!classList || !schedule.length) return;
        
        classList.innerHTML = '';
        
        schedule.forEach(classInfo => {
            const classItem = document.createElement('div');
            classItem.className = 'class-item';
            
            if (classInfo.attendance_marked) {
                classItem.classList.add('attended');
            } else if (!classInfo.access_granted) {
                classItem.classList.add('no-access');
            }
            
            classItem.innerHTML = `
                <div class="class-time">${classInfo.class_time}</div>
                <div class="class-subject">${classInfo.subject} ${classInfo.teacher_name ? '- ' + classInfo.teacher_name : ''}</div>
                <div class="class-location">
                    <i class="fas fa-map-marker-alt"></i>
                    ${classInfo.location}
                </div>
                ${classInfo.attendance_marked ? '<div class="attendance-badge">âœ“ Present</div>' : ''}
            `;
            
            classItem.addEventListener('click', () => {
                selectClass(classItem, classInfo.subject, classInfo.class_time);
            });
            
            classList.appendChild(classItem);
        });
    }

    function showMessage(message, type = 'info') {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message message-${type}`;
        messageDiv.innerHTML = `
            <i class="fas fa-${getMessageIcon(type)}"></i>
            <span>${message}</span>
        `;
        
        document.body.appendChild(messageDiv);
        
        setTimeout(() => {
            messageDiv.classList.add('show');
        }, 100);
        
        setTimeout(() => {
            messageDiv.classList.remove('show');
            setTimeout(() => {
                if (messageDiv.parentNode) {
                    messageDiv.parentNode.removeChild(messageDiv);
                }
            }, 300);
        }, 3000);
    }

    function getMessageIcon(type) {
        switch(type) {
            case 'success': return 'check-circle';
            case 'error': return 'exclamation-triangle';
            case 'warning': return 'exclamation-circle';
            default: return 'info-circle';
        }
    }

    let logoutBtn = document.querySelector('.logout-btn');
    if (logoutBtn) {
        logoutBtn.addEventListener('click', function () {
            sessionStorage.clear(); // or localStorage.clear();
            window.location.href = "/login";
        });
    }
    </script>
</body>
</html>